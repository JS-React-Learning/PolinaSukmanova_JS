# .github/workflows/project-done.yml
name: 'Project: set Done on PR close'

on:
  pull_request:
    types: [closed]

jobs:
  to-done:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    permissions:
      contents: read
      pull-requests: read
      issues: read
    steps:
      - name: Set Status=Done in org Project v2
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_PROJECTS_TOKEN }}
          script: |
            const ORG = "JS-React-Learning";
            const PROJECT_NUMBER = 1;
            const pr = context.payload.pull_request;
            const contentId = pr.node_id;

            const projRes = await github.graphql(`
              query($org:String!, $number:Int!) {
                organization(login:$org) {
                  projectV2(number:$number) {
                    id
                    fields(first:50) {
                      nodes {
                        __typename
                        ... on ProjectV2Field { id name }
                        ... on ProjectV2SingleSelectField { id name options { id name } }
                      }
                    }
                    items(first:100) {
                      nodes {
                        id
                        content { __typename ... on PullRequest { id } }
                      }
                    }
                  }
                }
              }
            `, { org: ORG, number: PROJECT_NUMBER });

            const project = projRes.organization?.projectV2;
            if (!project) { core.setFailed("Project v2 not found"); return; }

            const statusField = project.fields.nodes.find(f => f.name === "Status" && f.__typename === "ProjectV2SingleSelectField");
            const doneOpt = statusField?.options.find(o => o.name.toLowerCase() === "done");
            if (!statusField || !doneOpt) { core.setFailed('Status field or "Done" option not found'); return; }

            const item = project.items.nodes.find(n => n.content?.__typename === "PullRequest" && n.content.id === contentId);
            if (!item) { core.setFailed("Project item for this PR not found"); return; }

            await github.graphql(`
              mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!) {
                updateProjectV2ItemFieldValue(input:{
                  projectId:$projectId,
                  itemId:$itemId,
                  fieldId:$fieldId,
                  value:{ singleSelectOptionId:$optionId }
                }) { projectV2Item { id } }
              }
            `, {
              projectId: project.id,
              itemId: item.id,
              fieldId: statusField.id,
              optionId: doneOpt.id
            });

            core.info("Marked PR as Done in Project");
